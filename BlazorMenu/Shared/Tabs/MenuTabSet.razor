@inherits ComponentBase
@implements R_IMenuTabSet

@if (Tabs.Count == 0)
{
    <style>
        .card {
            box-shadow:none;
            background:transparent;
        }
    </style>
    <div class="d-flex align-items-center justify-content-between mt-3 mx-5">
        <div class="ms-3">
            <h1 class="fw-bold lh-base">We Provide Better Solution<br />For Your Business</h1>
            <p>We are team of talented programmer to make an easy way to manage your business</p>
        </div>
        <div class="me-5">
            <img src="assets/img/bg-home.png" width="400px" />
        </div>
    </div>
    <div class="row text-center">
        <div class="col">
            <img src="assets/img/box.png" width="50px">
            <h3 class="mt-3">Simple Application</h3>
            <p>Our application takes less time<br />than making cup of coffee.</p>
        </div>
        <div class="col">
            <img src="assets/img/program.png" width="50px">
            <h3 class="mt-3">Program For Everyone</h3>
            <p>We offer financing for nearly all<br />credit ranges and price points.</p>
        </div>
        <div class="col">
            <img src="assets/img/bag.png" width="50px">
            <h3 class="mt-3">Flexible Payment</h3>
            <p>Payment schedules that are build<br />to fit your needs</p>
        </div>
    </div>
}
else
{
    <CascadingValue Value="this" Name="MenuTabSet">
        <div class="card-body overflow-hidden p-0">
            <XTabs @ref="@_tabsRef"
                   RenderMode="BlazorXTabs.Configuration.RenderMode.Full"
                   CloseTabs
                   CloseAllTabs
                   CloseAllTabsButtonThreshold="2"
                   JustifiedHeader="false"
                   NewTabSetActive
                   OnTabRemoved="@OnTabRemoved"
                   OnActiveTabChanged="@OnActiveTabChanged" />
        </div>
    </CascadingValue>
}

<style>
    .xtabs-item .xtabs-link.active {
        padding: .5rem 1rem !important;
    }

    .xtabs-item .xtabs-link {
        padding: .5rem 1rem !important;
    }

    .xtabs-tab-content {
        padding: 0.25rem !important;
    }

    .xtabs .xtabs-header {
        padding: 0rem 1.25rem .75rem !important;
    }
</style>

@code {
    [CascadingParameter(Name = "RouteView")] public MenuTabsRouteView RouteView { get; set; }

    [Inject] private MenuTabSetTool _tabSetTool { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    // [Inject] private Tenant _tenant { get; set; }

    public List<MenuTab> Tabs => _tabSetTool.Tabs;

    private XTabs _tabsRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Tabs.Count == 0)
            return;

        var loItem = Tabs.FirstOrDefault(x => x.IsActive);
        if (loItem is not null)
        {
            await CreateNewTab(loItem);
        }
    }

    private async Task OnTabRemoved(XTab poTab)
    {
        var loTab = Tabs.FirstOrDefault(x => x.Id == Guid.Parse(poTab.Id));

        if (loTab is not null)
        {
            if (loTab.OnCloseMenuTab is not null)
            {
                var llPageClose = await loTab.OnCloseMenuTab.Invoke();
                if (!llPageClose)
                    return;
            }

            Tabs.Remove(loTab);

            var liTabIndex = Tabs.IndexOf(loTab);
            if (loTab.IsActive)
            {
                MenuTab activeTab = null;
                if (liTabIndex > 0)
                    activeTab = Tabs[liTabIndex - 1];
                else if (Tabs.Count > 0)
                    activeTab = Tabs[0];

                if (activeTab != null)
                    _tabSetTool.AddTab(activeTab.Title, activeTab.Url);
                else
                    NavigationManager.NavigateTo("/");
            }
        }
    }

    private Task OnActiveTabChanged(XTab poTab)
    {
        var loTab = Tabs.FirstOrDefault(x => x.Id == Guid.Parse(poTab.Id));

        if (loTab is not null)
            _tabSetTool.AddTab(loTab.Title, loTab.Url);

        return Task.CompletedTask;
    }

    private async Task CreateNewTab(MenuTab poTab)
    {
        var loNewTab = new XTab(_tabsRef, poTab.Title, CreatePageBody(poTab), "", false, poTab.Url);
        loNewTab.Id = poTab.Id.ToString();

        if (!_tabsRef.TabContent.Any(x => x.Id == poTab.Id.ToString()))
            await _tabsRef.AddPageAsync(loNewTab);
    }

    public async Task CloseTabFromProgram(R_IMenuTab poTab)
    {
        var loTab = (MenuTab)poTab;

        var loXTab = _tabsRef.TabContent.FirstOrDefault(x => x.Id == poTab.Id.ToString());

        await _tabsRef.CloseTabAsync(loXTab);
    }

    public RenderFragment CreatePageBody(MenuTab poTab)
    {
        RenderFragment bodyContent = __builder =>
           {
               <CascadingValue Value="@poTab" Name="currentTabMenu">
                   <MainBody>
                       @poTab.Body
                   </MainBody>
               </CascadingValue>
           };

        return bodyContent;
    }
}