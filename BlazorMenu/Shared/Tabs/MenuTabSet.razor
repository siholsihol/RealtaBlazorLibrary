@inherits ComponentBase
@implements R_IMenuTabSet

@if (Tabs.Count == 0)
{
    <style>
        .card {
            box-shadow:none;
            background:transparent;
        }
    </style>
    <div class="d-flex align-items-center justify-content-between mt-3 mx-5">
        <div class="ms-3">
            <h1 class="fw-bold lh-base">We Provide Better Solution<br />For Your Business</h1>
            <p>We are team of talented programmer to make an easy way to manage your business</p>
        </div>
        <div class="me-5">
            <img src="assets/img/bg-home.png" width="400px" />
        </div>
    </div>
    <div class="row text-center">
        <div class="col">
            <img src="assets/img/box.png" width="50px">
            <h3 class="mt-3">Simple Application</h3>
            <p>Our application takes less time<br />than making cup of coffee.</p>
        </div>
        <div class="col">
            <img src="assets/img/program.png" width="50px">
            <h3 class="mt-3">Program For Everyone</h3>
            <p>We offer financing for nearly all<br />credit ranges and price points.</p>
        </div>
        <div class="col">
            <img src="assets/img/bag.png" width="50px">
            <h3 class="mt-3">Flexible Payment</h3>
            <p>Payment schedules that are build<br />to fit your needs</p>
        </div>
    </div>
}
else
{
<CascadingValue Value="this" Name="MenuTabSet">
    <div class="card-body overflow-hidden p-0">
        <TelerikTabStrip ActiveTabIndex="@ActiveTabIndex"
                         ActiveTabIndexChanged="@OnActiveTabIndexChanged"
                         PersistTabContent>
            @foreach (var loTab in Tabs)
            {
                <TabStripTab Title="@loTab.Title"
                             Disabled="@loTab.Disabled"
                             Visible="@loTab.Visible"
                             Id="@loTab.Id.ToString()"
                             @key="@loTab.Id">
                    <HeaderTemplate>
                        <a>@loTab.Title</a>
                        <span class="ms-2 close" @onclick="@(() => OnTabClose(loTab))">
                        @*<span class="tab btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></span>*@
                            <i class="fa fa-times"></i>
                        </span>
                    </HeaderTemplate>
                    <Content>
                        @if (loTab.Body != null)
                        {
                            <CascadingValue Value="@loTab" Name="currentTabMenu">
                                <MainBody>
                                    @loTab.Body
                                </MainBody>
                            </CascadingValue>
                        }
                    </Content>
                </TabStripTab>
            }
        </TelerikTabStrip>
    </div>
</CascadingValue>
}

<style>
    .k-tabstrip-content.k-active {
        padding: .5rem;
    }

    .k-tabstrip-content,
    .k-tabstrip > .k-content {
        color: inherit;
    }
</style>

@code {
    private int ActiveTabIndex = 0;

    [Inject]
    public MenuTabSetTool TabSetTool { get; set; }

    [CascadingParameter(Name = "RouteView")]
    public MenuTabsRouteView RouteView { get; set; }

    public List<MenuTab> Tabs => TabSetTool.Tabs;

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (Tabs.Count == 0)
            return Task.CompletedTask;

        for (int i = 0; i < Tabs.Count; i++)
        {
            var item = Tabs[i];
            if (item.IsActive)
            {
                ScrollToTab(item);
            }
        }

        return Task.CompletedTask;
    }

    private async Task OnTabClose(MenuTab poTab)
    {
        var liTabIndex = Tabs.IndexOf(poTab);
        if (poTab.OnCloseMenuTab is not null)
        {
            var llPageClose = await poTab.OnCloseMenuTab.Invoke();
            if (!llPageClose)
                return;
        }

        Tabs.Remove(poTab);

        if (poTab.IsActive)
        {
            MenuTab activeTab = null;
            if (liTabIndex > 0)
                activeTab = Tabs[liTabIndex - 1];
            else if (Tabs.Count > 0)
                activeTab = Tabs[0];

            if (activeTab != null)
                await ActivateTab(activeTab);
            else
                NavigationManager.NavigateTo("/");
        }
    }

    private Task ActivateTab(MenuTab poTab)
    {
        TabSetTool.AddTab(poTab.Title, poTab.Url);

        return Task.CompletedTask;
    }

    private Task OnActiveTabIndexChanged(int piTabIndex)
    {
        var loCurrentTab = Tabs[piTabIndex];

        TabSetTool.AddTab(loCurrentTab.Title, loCurrentTab.Url);

        return Task.CompletedTask;
    }

    private Task ScrollToTab(MenuTab poTab)
    {
        if (ActiveTabIndex != Tabs.IndexOf(poTab))
        {
            ActiveTabIndex = Tabs.IndexOf(poTab);
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

    public async Task CloseTabFromProgram(R_IMenuTab poTab)
    {
        var loTab = (MenuTab)poTab;
        await OnTabClose(loTab);
    }
}