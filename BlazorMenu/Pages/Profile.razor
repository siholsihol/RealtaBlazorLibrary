@using R_CommonFrontBackAPI

<EditForm Model="@_userProfile"
          OnValidSubmit="@OnValidSubmit"
          OnInvalidSubmit="@OnInvalidSubmit"
          Context="_context">
    <DataAnnotationsValidator />

    <div class="row">
        <div class="col-12 d-flex justify-content-center mb-3">
            <div class="avatar avatar-5xl">
                <div class="h-100 w-100 rounded-circle overflow-hidden">
                    <img class="rounded-circle" src="@_imageBase64" alt="" data-dz-thumbnail="data-dz-thumbnail" />
                    <InputFile class="d-none" id="profile-image" OnChange="@OnChangeHandler" accept=".jpg" />
                    <label class="mb-0 overlay-icon d-flex flex-center" for="profile-image">
                        <span class="bg-holder overlay overlay-0"></span>
                        <span class="z-index-1 text-white dark__text-white text-center fs--1">
                            <span class="fas fa-camera"></span>
                            <span class="d-block">Edit Photo</span>
                        </span>
                    </label>
                </div>
            </div>
        </div>
        <UserProfileValidationMessage For="@(() => _userProfile.OPHOTO)" Class="col-12 d-flex justify-content-center" />
    </div>

    <div class="row g-2">
        <div class="col">
            <div class="form-floating">
                <input class="form-control" readonly id="user-id" type="text" @bind-value="_userProfile.CUSER_ID" />
                <label class="form-label" for="user-id">User Id</label>
            </div>
        </div>
        <div class="col">
            <div class="form-floating">
                <input class="form-control @_context.FieldCssClass(() => _userProfile.CUSER_NAME)" id="username" type="text" @bind-value="_userProfile.CUSER_NAME" />
                <label class="form-label" for="username">Username</label>
            </div>
            <ValidationMessage For="@(() => _userProfile.CUSER_NAME)" />
        </div>

        <div class="col-12">
            <div class="form-floating">
                <input class="form-control @_context.FieldCssClass(() => _userProfile.CEMAIL_ADDRESS)" id="email" type="text" @bind-value="_userProfile.CEMAIL_ADDRESS" />
                <label class="form-label" for="email">Email</label>
            </div>
            <ValidationMessage For="@(() => _userProfile.CEMAIL_ADDRESS)" class="form-label is-invalid" />
        </div>

        <div class="col">
            <div class="form-floating">
                <input class="form-control" id="last-update-password" type="date" @bind-value="_lastUpdatePassword" readonly />
                <label class="form-label" for="last-update-password">Last Update Password</label>
            </div>
        </div>
        <div class="col">
            <div class="form-floating">
                <input class="form-control" id="position" type="text" @bind-value="_userProfile.CPOSITION" />
                <label class="form-label" for="position">Position</label>
            </div>
        </div>

        <div class="col-12">
            <div class="form-floating">
                <select class="form-select @_context.FieldCssClass(() => _userProfile.CCULTURE_ID)" id="culture-id" @bind="_userProfile.CCULTURE_ID">
                    @{
                        foreach (var culture in _cultures)
                        {
                            <option value="@culture.CultureId">@culture.CultureName</option>
                        }
                    }
                </select>
                <label class="form-label" for="email">Culture Id</label>
            </div>
            <ValidationMessage For="@(() => _userProfile.CCULTURE_ID)" />
        </div>
    </div>

    <div class="modal-footer d-flex justify-content-between">
        <button class="btn btn-outline-secondary" type="button" @onclick="CloseProfile">Cancel</button>
        <button class="btn btn-outline-primary" type="button" @onclick="ShowChangePasswordPage">Change Password</button>
        <button class="btn btn-primary" type="submit">Update</button>
    </div>
</EditForm>

<MenuModal @ref="@changePasswordModal"
           BodyCssClass="px-5"
           Title="Change password">
</MenuModal>

@code {
    [Parameter] public Func<bool, Task> CloseModalTask { get; set; }

    [Inject] private IClientHelper _clientHelper { get; set; }
    [Inject] private R_ToastService _toastService { get; set; }

    private ChangePassword _modalChangePassword;

    private R_MenuModel _menuModel = new();
    private UserProfileModel _userProfile = new();
    private DateTime? _lastUpdatePassword = null;
    private List<CultureModel> _cultures = new();
    private UserProfileFieldClassProvider _userProfileFieldClassProvider = new();
    private string _imageBase64 = "assets/img/avatar.png";
    private MenuModal changePasswordModal;

    protected override async Task OnInitializedAsync()
    {
        var loEx = new R_Exception();

        try
        {
            var loResult = await _menuModel.GetUserProfileAsync(new GetUserProfileParameterDTO
            {
                CUSER_ID = _clientHelper.UserId
            });

            _userProfile = R_FrontUtility.ConvertObjectToObject<UserProfileModel>(loResult.Data);

            _lastUpdatePassword = !string.IsNullOrWhiteSpace(_userProfile.CLAST_UPDATE_PASSWORD) ?
            DateTime.ParseExact(_userProfile.CLAST_UPDATE_PASSWORD, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture) : null;

            _cultures = R_Culture.R_GetAvailableCultures().Where(x => x.Value != "3").Select(x => new CultureModel
                {
                    CultureId = x.Value == "1" ? "en" : "id",
                    CultureName = x.Name
                }).ToList();

            if (_userProfile.OPHOTO is not null)
            {
                var base64Image = Convert.ToBase64String(_userProfile.OPHOTO);
                _imageBase64 = "data:image/jpeg;base64," + base64Image;
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    public async Task OnValidSubmit(EditContext editContext)
    {
        var loEx = new R_Exception();

        try
        {
            var lcImageBase64 = _imageBase64.Replace("data:image/jpeg;base64,", "");
            var loParam = R_FrontUtility.ConvertObjectToObject<UpdateUserProfileParameterDTO>(_userProfile);
            loParam.CUPDATE_BY = _clientHelper.UserId;
            loParam.OPHOTO = Convert.FromBase64String(lcImageBase64);

            await _menuModel.UpdateUserProfileAsync(loParam);

            await CloseModalTask?.Invoke(true);
        }
        catch (Exception ex)
        {
            loEx.Add(ex);
        }

        loEx.ThrowExceptionIfErrors();
    }

    public void OnInvalidSubmit(EditContext editContext)
    {
        editContext.SetFieldCssClassProvider(_userProfileFieldClassProvider);

        StateHasChanged();
    }

    private async Task OnChangeHandler(InputFileChangeEventArgs eventArgs)
    {
        var loMS = new MemoryStream();
        await eventArgs.File.OpenReadStream().CopyToAsync(loMS);
        var loByteFile = loMS.ToArray();

        _userProfile.OPHOTO = loByteFile;
        _imageBase64 = $"data:{eventArgs.File.ContentType};base64,{Convert.ToBase64String(loByteFile)}";
    }

    private async Task CloseProfile()
    {
        await CloseModalTask?.Invoke(false);
    }

    private async Task ShowChangePasswordPage()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("CloseModalTask", OnCloseModalTask);

        await changePasswordModal.ShowAsync<ChangePassword>(parameters: parameters);
    }

    private async Task OnCloseModalTask()
    {
        await changePasswordModal.HideAsync();
    }
}
