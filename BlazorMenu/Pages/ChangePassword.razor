@using R_CrossPlatformSecurity
@using R_SecurityPolicyCommon.DTOs
<div class="modal fade @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
    <div class="modal-dialog modal-dialog-centered modal-sm" role="document">
        <div class="modal-content border-0">
            <div class="modal-header px-5 position-relative modal-shape-header bg-shape">
                <div class="position-relative z-index-1 light">
                    <h4 class="mb-0 text-white" id="authentication-modal-label">Change password</h4>
                </div>
                <button class="btn-close btn-close-white position-absolute top-0 end-0 mt-2 me-2" data-bs-dismiss="modal" aria-label="Close" @onclick="(() => Close())" />
            </div>
            <div class="modal-body px-5">
                <EditForm EditContext="@_editContext"
                          OnValidSubmit="@OnValidSubmit" 
                          OnInvalidSubmit="@OnInvalidSubmit" 
                          Context="_context"
                          class="mt-1">

                    <div class="mb-3">
                        <input class="form-control @_context.FieldCssClass(() => _changePasswordModel.COLD_PASSWORD)" type="password" placeholder="Old Password" @bind="_changePasswordModel.COLD_PASSWORD" />
                        <ValidationMessage For="@(() => _changePasswordModel.COLD_PASSWORD)" />
                    </div>
                    <div class="mb-3">
                        <input class="form-control @_context.FieldCssClass(() => _changePasswordModel.CNEW_PASSWORD)" type="password" placeholder="New Password" @bind="_changePasswordModel.CNEW_PASSWORD" />
                        <ValidationMessage For="@(() => _changePasswordModel.CNEW_PASSWORD)" />
                    </div>
                    <div class="mb-3">
                        <input class="form-control @_context.FieldCssClass(() => _changePasswordModel.CCONFIRM_PASSWORD)" type="password" placeholder="Confirm Password" @bind="_changePasswordModel.CCONFIRM_PASSWORD" />
                        <ValidationMessage For="@(() => _changePasswordModel.CCONFIRM_PASSWORD)" />
                    </div>
                    <button class="btn btn-primary d-block w-100 mt-3" type="submit">Change password</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (_showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Inject] private IClientHelper _clientHelper { get; set; }
    [Inject] private R_ISymmetricJSProvider _encryptProvider { get; set; }

    private string _modalClass = "";
    private string _modalDisplay = "none;";
    private bool _showBackdrop = false;

    private R_MenuModel _menuModel = new();
    private ChangePasswordModel _changePasswordModel;
    private UserProfileFieldClassProvider _userProfileFieldClassProvider = new();
    private GetSecurityPolicyDTO _securityPolicy = null;

    private EditContext _editContext;
    private ValidationMessageStore _validationMessageStore;

    protected override void OnInitialized()
    {
        _changePasswordModel = new();
        _editContext = new EditContext(_changePasswordModel);
        _validationMessageStore = new ValidationMessageStore(_editContext);

        _editContext.OnValidationRequested += async (sender, eventArgs) => await OnValidationRequested(sender,eventArgs);
    }

    private async Task OnValidationRequested(object sender, ValidationRequestedEventArgs eventArgs)
    {
        var llHasError = false;

        _validationMessageStore.Clear();

        if (string.IsNullOrWhiteSpace(_changePasswordModel.COLD_PASSWORD))
        {
            _validationMessageStore.Add(() => _changePasswordModel.COLD_PASSWORD, "The Old Password field is required.");
            llHasError = true;
        }

        if (string.IsNullOrWhiteSpace(_changePasswordModel.CNEW_PASSWORD))
        {
            _validationMessageStore.Add(() => _changePasswordModel.CNEW_PASSWORD, "The New Password field is required.");
            llHasError = true;
        }

        if (string.IsNullOrWhiteSpace(_changePasswordModel.CCONFIRM_PASSWORD))
        {
            _validationMessageStore.Add(() => _changePasswordModel.CCONFIRM_PASSWORD, "The Confirmation Password field is required.");
            llHasError = true;
        }

        if (_changePasswordModel.CNEW_PASSWORD != _changePasswordModel.CCONFIRM_PASSWORD)
        {
            _validationMessageStore.Add(() => _changePasswordModel.CCONFIRM_PASSWORD, "Passwords do not match.");
            llHasError = true;
        }

        if (llHasError)
        {
            _editContext.NotifyValidationStateChanged();
            return;
        }

        if (_securityPolicy.LMINIMUM_PASSWORD_LENGTH && 
            _securityPolicy.IMINIMUM_PASSWORD_LENGTH > _changePasswordModel.CNEW_PASSWORD.Length)
        {
            _validationMessageStore.Add(() => _changePasswordModel.CNEW_PASSWORD, $"Minimum password length is {_securityPolicy.IMINIMUM_PASSWORD_LENGTH} characters.");
            llHasError = true;
        }

        if (_securityPolicy.LMINIMUM_PASSWORD_AGE && 
            !string.IsNullOrWhiteSpace(_securityPolicy.CLAST_UPDATE_PASSWORD) && 
            _securityPolicy.IMINIMUM_PASSWORD_AGE > DateDiff(DateInterval.Day, ToDateTime(_securityPolicy.CCURRENT_DATE, "yyyy-MM-dd HH:mm:ss"), ToDateTime(_securityPolicy.CLAST_UPDATE_PASSWORD)))
        {
            _validationMessageStore.Add(() => _changePasswordModel.CNEW_PASSWORD, $"You can change your password on {_securityPolicy.IMINIMUM_PASSWORD_AGE} days since your last password's update.");
            llHasError = true;
        }

        if (_securityPolicy.LENFORCE_PASSWORD_HISTORY)
        {
            var lcEncryptedPassword = await _encryptProvider.TextEncrypt(_changePasswordModel.CNEW_PASSWORD, _clientHelper.UserId);

            var loResult = await _menuModel.CheckPasswordHistoryAsync(new CheckPasswordHistoryParameterDTO
            {
                CCOMPANY_ID = _clientHelper.CompanyId,
                CUSER_ID = _clientHelper.UserId,
                CHASH_PASSWORD = lcEncryptedPassword
            });

            var llPasswordExist = loResult.Data;
            if (llPasswordExist)
            {
                _validationMessageStore.Add(() => _changePasswordModel.CNEW_PASSWORD, $"You cannot use your last {_securityPolicy.IENFORCE_PASSWORD_HISTORY} passwords.");
                llHasError = true;
            }
        }

        if (_securityPolicy.LCOMPLEXITY)
        {
            if (_securityPolicy.LINCLUDE_LETTER && _changePasswordModel.CNEW_PASSWORD.Any(x => !char.IsLetter(x)))
            {
                _validationMessageStore.Add(() => _changePasswordModel.CNEW_PASSWORD, "Password must contain letter.");
                llHasError = true;
            }

            if (_securityPolicy.LINCLUDE_UPPERCASE && _changePasswordModel.CNEW_PASSWORD.Any(x => !char.IsUpper(x)))
            {
                _validationMessageStore.Add(() => _changePasswordModel.CNEW_PASSWORD, "Password must contain uppercase.");
                llHasError = true;
            }

            if (_securityPolicy.LINCLUDE_LOWERCASE && _changePasswordModel.CNEW_PASSWORD.Any(x => !char.IsLower(x)))
            {
                _validationMessageStore.Add(() => _changePasswordModel.CNEW_PASSWORD, "Password must contain lowercase.");
                llHasError = true;
            }

            if (_securityPolicy.LINCLUDE_NUMBER && _changePasswordModel.CNEW_PASSWORD.Any(x => !char.IsNumber(x)))
            {
                _validationMessageStore.Add(() => _changePasswordModel.CNEW_PASSWORD, "Password must contain number.");
                llHasError = true;
            }

            if (_securityPolicy.LINCLUDE_SPECIAL_CHARACTER && _changePasswordModel.CNEW_PASSWORD.Any(x => char.IsLetterOrDigit(x)))
            {
                _validationMessageStore.Add(() => _changePasswordModel.CNEW_PASSWORD, "Password must contain special character.");
                llHasError = true;
            }

            if (_securityPolicy.LCANNOT_CONTAIN_USER_ID && _changePasswordModel.CNEW_PASSWORD.Contains(_clientHelper.UserId))
            {
                _validationMessageStore.Add(() => _changePasswordModel.CNEW_PASSWORD, "Password cannot contain user id.");
                llHasError = true;
            }
        }

        if (llHasError)
            _editContext.NotifyValidationStateChanged();
    }

    public async Task Open()
    {
        var loEx = new R_Exception();

        try
        {
            var loParam = new GetSecurityPolicyParameterDTO
            {
                CCOMPANY_ID = _clientHelper.CompanyId,
                CUSER_ID = _clientHelper.UserId
            };

            var loSecurity = await _menuModel.GetSecurityPolicyAsync(loParam);
            _securityPolicy = loSecurity.Data;

            _modalClass = "show";
            _modalDisplay = "block;";
            _showBackdrop = true;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            loEx.Add(ex);
        }

        loEx.ThrowExceptionIfErrors();
    }

    public async Task OnValidSubmit(EditContext editContext)
    {
        var loEx = new R_Exception();

        try
        {
            var loParam = new UpdatePasswordParameterDTO
            {
                CCOMPANY_ID = _clientHelper.CompanyId,
                CUSER_ID = _clientHelper.UserId,
                CHASH_PASSWORD = await _encryptProvider.TextEncrypt(_changePasswordModel.CNEW_PASSWORD, _clientHelper.UserId),
                COLD_USER_HASH_PASSWORD = await _encryptProvider.TextEncrypt(_changePasswordModel.COLD_PASSWORD, _clientHelper.UserId)
            };

            await _menuModel.UpdatePasswordAsync(loParam);

            Close();
        }
        catch (Exception ex)
        {
            loEx.Add(ex);
        }

        loEx.ThrowExceptionIfErrors();
    }

    public void OnInvalidSubmit(EditContext editContext)
    {
        editContext.SetFieldCssClassProvider(_userProfileFieldClassProvider);

        StateHasChanged();
    }

    public void Close()
    {
        _modalClass = "";
        _modalDisplay = "none;";
        _showBackdrop = false;

        StateHasChanged();
    }

    private static int DateDiff(DateInterval peInterval, DateTime pdDateFrom, DateTime pdDateTo)
    {
        switch (peInterval)
        {
            case DateInterval.Minute:
                return Math.Abs((pdDateFrom - pdDateTo).Minutes);
            default:
                return Math.Abs((pdDateFrom - pdDateTo).Days);
        }
    }

    private static DateTime ToDateTime(string pcDateString)
    {
        return ToDateTime(pcDateString, "yyyyMMdd");
    }

    private static DateTime ToDateTime(string pcDateString, string pcFormat)
    {
        return DateTime.ParseExact(pcDateString, pcFormat, System.Globalization.CultureInfo.InvariantCulture);
    }

    private enum DateInterval
    {
        Minute,
        Day
    }
}
